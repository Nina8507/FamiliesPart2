@page "/FindUserByUsername"
@using FamiliesPart2.Models
@using FamiliesPart2.Data
@inject IService<User> _service
@inject NavigationManager _manager

<h3>Find User By Username</h3>

<p>Search by First Name:<input type="text" @oninput="@((arg) => Filter(arg))" 
                               style="width: 200px"/>
</p> 

@if (_usersToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!_usersToShow.Any())
{
    <p>
        <em> No users found...</em>
    </p>
}
<table class="table table-striped">
        <thead>
        <tr>
            <th>User Id</th>
            <th>Username</th>
            <th>Password</th>
            <th>Role</th>
        </tr>
        </thead>
    
        <tbody>
        @foreach (var u in _usersToShow)
        {
            <tr>
                <td>@u.Id</td>
                <td>@u.Username</td>
                <td>@u.Password</td>
                <td>@u.Role</td>
            </tr>
        }
        </tbody>
        </table>

@code {
    private string _filterByName;
    private IList<User> _usersToShow = new List<User>(); 
    private IList<User> _users = new List<User>();

    protected override async Task OnInitializedAsync() 
    {
        _usersToShow = await _service.GetAllAsync();
    }

    private void Filter(ChangeEventArgs changeEventArgs)
    {
        _filterByName = null;
        try
        {
            _filterByName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.StackTrace);
            throw;
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        _usersToShow = _users.Where(u => u.Username.Equals(_filterByName)).ToList();
    }

}