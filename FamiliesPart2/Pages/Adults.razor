@page "/Adults"
@using FamiliesPart2.Data
@using FamiliesPart2.Models
@inject IService<Adult> _adultService
@inject NavigationManager _navigationManager

<h3>Adults</h3>
<p>Search by First Name:<input type="text" @oninput="@(Filter)" 
                               style="width: 200px"/>
</p>

@if (_adultsToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!_adultsToShow.Any())
{
    <p>
        <em>No adults registred!</em>
    </p>
}
else
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th scope="col">Id</th>
            <th scope="col">First Name</th>
            <th scope="col">Last Name</th>
            <th scope="col">Hair Color</th>
            <th scope="col">Age</th>
            <th scope="col">Weight</th>
            <th scope="col">Height</th>
            <th scope="col">Sex</th>
            <th scope="col">Job Title</th>
            <th scope="col">Salary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var a in _adultsToShow)
        {
            <tr>
                <td>@a.Id</td>
                <td>@a.FirstName</td>
                <td>@a.LastName</td>
                <td>@a.HairColor</td>
                <td>@a.Age</td>
                <td>@a.Weight</td>
                <td>@a.Height</td>
                <td>@a.Sex</td>
                <td>@a.JobTitle.JobTitle</td>
                <td>@a.JobTitle.Salary</td>

                <AuthorizeView Policy="MustBeManager">
                    <td>
                        <button @onclick="@(() => RemoveAdultAsync(a.Id))">
                            <i class="oi oi-trash" style="color: red"/>
                        </button>
                    </td>
                    <td>
                        <button @onclick="() => EditAdultAsync(a.Id)">
                            <i class="oi oi-pencil" style="color: #2efff8"></i>
                        </button>
                    </td>
                </AuthorizeView>

            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Adult> _adultsToShow = new List<Adult>();
    private IList<Adult> _adults = new List<Adult>();
    private string _filterByName;
    
    protected override async Task OnInitializedAsync()
    {
        _adultsToShow = await _adultService.GetAllAsync();
        //_adultsToShow = _adults;
    }

    private void Filter(ChangeEventArgs changeEventArgs)
    {
        _filterByName = null;
        try
        {
            _filterByName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.StackTrace);
            throw;
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        _adultsToShow = _adults.Where(a => a.FirstName.Equals(_filterByName)).ToList();
    }

    private async Task RemoveAdultAsync(int adultId)
    {
        await _adultService.RemoveAsync(adultId);
        Adult adultToRemove = _adults.FirstOrDefault(a => a.Id == adultId);
        _adultsToShow.Remove(adultToRemove);
        _adults.Remove(adultToRemove);
    }

    private async Task EditAdultAsync(int adultId)
    {
        _navigationManager.NavigateTo($"EditAdult/{adultId}");
    }
}